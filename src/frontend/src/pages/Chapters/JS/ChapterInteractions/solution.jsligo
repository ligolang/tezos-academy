type storage = int;

type parameter =
  ["Fire", int]
| ["Stop"];

type return_ = [list<operation>, storage];

type action = ["Order"] | ["Nothing"];

const right_laser_address: address = "tz1fND4ejogxWN7HB5JKdz119A48Cp2eYKj9" as address;
const left_laser_address: address = "tz1PVWEWDcuow9R6y5EFwcHbFNoZBZ9RjxaB" as address;

const orders = (_param: unit, s: storage) : return_ => {
  const right_laser: contract<parameter> = match(
    Tezos.get_contract_opt(right_laser_address) as option<contract<parameter>>) {
        when(Some(contract)): contract;
        when(None): failwith("Contract not found.")
    };
  const left_laser: contract<parameter> = match(
    Tezos.get_contract_opt(left_laser_address) as option<contract<parameter>>) {
        when(Some(contract)): contract;
        when(None): failwith("Contract not found.")
    };

  // Type your solution below
  const operations: list<operation> = list([
      Tezos.transaction(Fire(5), 0 as tez, right_laser),
      Tezos.transaction(Stop(), 0 as tez, right_laser),
      Tezos.transaction(Fire(5), 0 as tez, left_laser),
      Tezos.transaction(Stop(), 0 as tez, left_laser)
  ]);
  return [operations, s];
};

@entry
const main = (a: action, s: storage) : return_ => {
  return
    (match (a) {
     when(Order): orders(unit, s);
     when(Nothing): [list([]) as list <operation>, s]
   })
};
