type command = {
    item : nat,
    price : tez
}

type mainAction = ["Pay", command] | ["Buy"]

type storage = unit

type return_ = [list<operation>, storage]

const purchase = (_item: nat, purchase_price: tez, store: storage) : return_ => {
    const ship_address : address = ("tz1TGu6TN5GSez2ndXXeDX6LgUDvLzPLqgYV" as address);
    const vendor_address : address = ("tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" as address);

    let _check_source : unit = assert_with_error( (Tezos.get_source() != ship_address), "Access denied");
    let _check_amount : unit = assert_with_error( (Tezos.get_amount() != purchase_price), "Incorrect amount");

    let vendor_contract : contract<unit> =
      match(Tezos.get_contract_opt (vendor_address) as option<contract<unit>>){
        when(Some (c)): c;
        when(None): failwith("Contract not found.") as contract<unit>
    };

    // Type your solution below

    return [(list([]) as list<operation>), store];
}

@entry
const main = (action: mainAction, store: storage) : return_ =>
    match(action) {
        when(Pay (cmd)): purchase (cmd.item, cmd.price, store);
        when(Buy): failwith("not implemented") as return_
    }
